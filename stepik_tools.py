#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –Ω–∞ Stepik
"""

import requests
import yaml
import json
import re
from pathlib import Path
from typing import Dict
from lesson_classes import Lesson
from step_classes import Step, StepikAPI
from h1_h2_steps.h1_h2_steps import parse_text


class StepikCourseTools:
    def __init__(self):
        self.api = StepikAPI()
        self.token = None
        self.course_id = None
        self.lessons = []
        self.current_lesson = None

    def load_credentials(self):
        try:
            with open("creds.yaml", 'r') as f:
                creds = yaml.safe_load(f)
                return creds['client_id'], creds['client_secret']
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ creds.yaml: {e}")
            return None, None

    def authenticate(self):
        client_id, client_secret = self.load_credentials()
        if not client_id or not client_secret:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False

        try:
            self.token = self.api.get_token(client_id, client_secret)
            print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    def parse_step_from_markdown(self, id: int, step_data: Dict) -> Step:
        step_type = step_data['type']
        step_id = id
        title = step_data['header']
        text = step_data['text']

        # –í—ã–∑–æ–≤ —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ Step.parse (–æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
        return Step.parse(step_id, title, text, step_type.upper())

    def save_lesson_to_markdown(self, lesson: Lesson, filename: str) -> bool:
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"# lesson_id: {lesson.lesson_id}\n\n")
                for step in lesson.steps:
                    f.write(f"## {type(step).__name__.upper()} {step.title}\n")
                    f.write(json.dumps(step.to_json(), ensure_ascii=False, indent=2))
                    f.write("\n\n")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
            return False

    def save_lessons_to_file(self):
        for lesson in self.lessons:
            filename = f"lesson_{lesson.lesson_id}.md"
            success = self.save_lesson_to_markdown(lesson, filename)
            if success:
                print(f"–£—Ä–æ–∫ {lesson.lesson_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {filename}")
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–∫ {lesson.lesson_id}")

    def upload_lesson_from_markdown(self, file_path: str):
        if not self.course_id:
            print("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ ID –∫—É—Ä—Å–∞")
            return

        try:
            import requests
            from step_classes import StepText, StepikAPI

            with open(file_path, 'r', encoding='utf-8') as f:
                text = f.read()

            lesson_data = parse_text(text)

            lesson_id = lesson_data.get("lesson_id")
            lesson_id = int(lesson_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ

            steps_raw = lesson_data.get("steps", [])
            if not lesson_id:
                raise ValueError("–í Markdown-—Ñ–∞–π–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω lesson_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞.")

            lesson = Lesson(lesson_id=int(lesson_id))

            for idx, step_data in enumerate(steps_raw, start=1):
                step = Step.parse(idx, step_data['header'], step_data['text'], step_data['type'])
                lesson.steps.append(step)

            lesson.add_to_course(self.course_id, self.token)
            print(f"–£—Ä–æ–∫ {lesson.lesson_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å {self.course_id}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–≥–æ–≤
            response = requests.get(
                f'https://stepik.org/api/lessons/{lesson.lesson_id}',
                headers={
                    'Authorization': f'Bearer {self.token}',
                    'Content-Type': 'application/json'
                }
            )
            response.raise_for_status()
            existing_steps_count = len(response.json()['lessons'][0].get('steps', []))

            print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–≥–æ–≤: {existing_steps_count}")

            # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏
            for idx, step in enumerate(lesson.steps, start=1):
                step_url = f"https://stepik.org/lesson/{lesson.lesson_id}/step/{idx}"
                try:
                    # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
                    step.update(step_url, self.token)
                    print(f"üîÅ –®–∞–≥ {idx} –æ–±–Ω–æ–≤–ª—ë–Ω")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞ {idx}: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Ä–æ–∫–∞: {e}")

    def _handle_step_deletion(self):
        try:
            lesson_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID —É—Ä–æ–∫–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —à–∞–≥: "))
            step_pos = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: "))
            step_url = f"https://stepik.org/lesson/{lesson_id}/step/{step_pos}"
            confirm = input(f"–£–¥–∞–ª–∏—Ç—å —à–∞–≥ {step_pos} –∏–∑ —É—Ä–æ–∫–∞ {lesson_id}? (y/n): ").lower()
            if confirm == 'y':
                dummy_step = Step(step_id=0, title="", text="")  # –ø—Ä–æ—Å—Ç–æ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞
                success = dummy_step.remove(step_url, self.token)
                if success:
                    print(f"‚úÖ –®–∞–≥ {step_pos} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —É—Ä–æ–∫–∞ {lesson_id}")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–≥")
            else:
                print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

    def _handle_step_update(self):
        try:
            lesson_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID —É—Ä–æ–∫–∞, –≥–¥–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–≥: "))
            step_pos = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–≥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: "))
            folder = Path("example")
            md_files = list(folder.glob("*.md"))
            if not md_files:
                print("–í –ø–∞–ø–∫–µ example –Ω–µ—Ç .md —Ñ–∞–π–ª–æ–≤")
                return
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ .md —Ñ–∞–π–ª—ã:")
            for idx, f in enumerate(md_files, 1):
                print(f"{idx}. {f.name}")
            file_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, first_lesson.md): ")
            selected_path = folder / file_name
            if not selected_path.exists():
                print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–∞—Ä—Å–∏–º —à–∞–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞
            with open(selected_path, 'r', encoding='utf-8') as f:
                text = f.read()
            lesson_data = parse_text(text)
            steps = lesson_data.get("steps", [])

            if step_pos < 1 or step_pos > len(steps):
                print(f"‚ùå –í —Ñ–∞–π–ª–µ —Ç–æ–ª—å–∫–æ {len(steps)} —à–∞–≥–æ–≤. –£–∫–∞–∑–∞–Ω–Ω—ã–π —à–∞–≥ {step_pos} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
                return

            step_data = steps[step_pos - 1]
            step = Step.parse(step_pos, step_data['header'], step_data['text'], step_data['type'])
            step_url = f"https://stepik.org/lesson/{lesson_id}/step/{step_pos}"
            step.update(step_url, self.token)
            print(f"‚úÖ –®–∞–≥ {step_pos} –≤ —É—Ä–æ–∫–µ {lesson_id} –æ–±–Ω–æ–≤–ª—ë–Ω")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞: {e}")

    def _handle_step_update_from_file_ids(self):
        try:
            folder = Path("example")
            md_files = list(folder.glob("*.md"))
            if not md_files:
                print("–í –ø–∞–ø–∫–µ example –Ω–µ—Ç .md —Ñ–∞–π–ª–æ–≤")
                return

            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ .md —Ñ–∞–π–ª—ã:")
            for idx, f in enumerate(md_files, 1):
                print(f"{idx}. {f.name}")
            file_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, first_step.md): ")
            selected_path = folder / file_name
            if not selected_path.exists():
                print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            with open(selected_path, 'r', encoding='utf-8') as f:
                raw_text = f.read()

            # –ò—â–µ–º lesson_id –∏ step_id –≤ —Ç–µ–∫—Å—Ç–µ
            lesson_id_match = re.search(r'lesson_id\s*:\s*(\d+)', raw_text)
            step_id_match = re.search(r'step_id\s*:\s*(\d+)', raw_text)

            if not lesson_id_match or not step_id_match:
                print("‚ùå –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∏ 'lesson_id: N' –∏ 'step_id: M'")
                return

            lesson_id = int(lesson_id_match.group(1))
            step_id = int(step_id_match.group(1))

            parsed = parse_text(raw_text)
            steps = parsed.get("steps", [])
            if not steps:
                print("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–≥–æ–≤")
                return

            step_data = steps[0]
            step = Step.parse(
                step_id=step_id,
                title=step_data['header'],
                text=step_data['text'],
                step_type=step_data['type']
            )

            step_url = f"https://stepik.org/lesson/{lesson_id}/step/{step_id}"
            step.update(step_url, self.token)
            print(f"‚úÖ –®–∞–≥ {step_id} –≤ —É—Ä–æ–∫–µ {lesson_id} –æ–±–Ω–æ–≤–ª—ë–Ω –∏–∑ —Ñ–∞–π–ª–∞")

        except Exception as e:
            print(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞: {e}")


    def _handle_lesson_upload(self, update_existing: bool):
        folder = Path("example")
        md_files = list(folder.glob("*.md"))
        if not md_files:
            print("–í –ø–∞–ø–∫–µ example –Ω–µ—Ç .md —Ñ–∞–π–ª–æ–≤")
            return

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ .md —Ñ–∞–π–ª—ã:")
        for idx, f in enumerate(md_files, 1):
            print(f"{idx}. {f.name}")

        file_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, first_lesson.md): ")
        selected_path = folder / file_name
        if not selected_path.exists():
            print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if update_existing:
            self.upload_lesson_from_markdown(selected_path)
        else:
            self.create_new_lesson_from_markdown(selected_path)

    def _handle_add_step_to_lesson(self):
        try:
            print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∞–≥–∞:")
            step_types = ["TEXT", "MATCHING", "NUMBER", "QUIZ", "SPACE", "STRING", "TASKINLINE"]
            for idx, t in enumerate(step_types, 1):
                print(f"{idx}. {t}")
            step_choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ —à–∞–≥–∞: "))
            if step_choice < 1 or step_choice > len(step_types):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞")
                return
            step_type = step_types[step_choice - 1]

            folder = Path("example")
            md_files = list(folder.glob("*.md"))
            if not md_files:
                print("–í –ø–∞–ø–∫–µ example –Ω–µ—Ç .md —Ñ–∞–π–ª–æ–≤")
                return

            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ .md —Ñ–∞–π–ª—ã:")
            for idx, f in enumerate(md_files, 1):
                print(f"{idx}. {f.name}")
            file_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, string.md): ")
            selected_path = folder / file_name
            if not selected_path.exists():
                print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            with open(selected_path, 'r', encoding='utf-8') as f:
                text = f.read()

            parsed = parse_text(text)
            lesson_id = parsed.get("lesson_id")
            if not lesson_id:
                print("‚ùå –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω lesson_id")
                return
            steps = parsed.get("steps", [])
            if not steps:
                print("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —à–∞–≥")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            headers = {
                'Authorization': f'Bearer {self.token}',
                'Content-Type': 'application/json'
            }
            response = requests.get(
                f'https://stepik.org/api/lessons/{lesson_id}',
                headers=headers
            )
            response.raise_for_status()
            step_count = len(response.json()['lessons'][0].get('steps', []))
            position = step_count + 1

            step_data = steps[0]
            step = Step.parse(
                step_id=0,
                title=step_data['header'],
                text=step_data['text'],
                step_type=step_type
            )

            step.create(lesson_id, position, self.token)
            print(f"‚úÖ –®–∞–≥ —Ç–∏–ø–∞ {step_type} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É—Ä–æ–∫ {lesson_id} –≤ –ø–æ–∑–∏—Ü–∏—é {position}")

        except Exception as e:
            print(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–≥–∞: {e}")


    def interactive_dialog(self):
        print("=== Stepik Tools ===")

        if not Path("creds.yaml").exists():
            print("–§–∞–π–ª creds.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        if not self.authenticate():
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º course_id –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        while True:
            try:
                self.course_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∫—É—Ä—Å–∞: "))
                break
            except ValueError:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫—É—Ä—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

        while True:
            print("\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
            print("1. –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫ –∏–∑ Markdown")
            print("2. –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–∫ –∏–∑ Markdown")
            print("3. –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–∫")
            print("4. –û–±–Ω–æ–≤–∏—Ç—å —à–∞–≥ –≤ —É—Ä–æ–∫–µ (–∏–∑ Markdown)")
            print("5. –£–¥–∞–ª–∏—Ç—å —à–∞–≥ –∏–∑ —É—Ä–æ–∫–∞")
            print("6. –í—ã—Ö–æ–¥")

            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ")

            if choice == '2':
                self._handle_lesson_upload(update_existing=True)

            if choice == '1':
                folder = Path("example")
                md_files = list(folder.glob("*.md"))
                if not md_files:
                    print("–í –ø–∞–ø–∫–µ example –Ω–µ—Ç .md —Ñ–∞–π–ª–æ–≤")
                else:
                    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ .md —Ñ–∞–π–ª—ã:")
                    for idx, f in enumerate(md_files, 1):
                        print(f"{idx}. {f.name}")
                    file_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, first_lesson.md): ")
                    selected_path = folder / file_name
                    if selected_path.exists():
                        self.upload_lesson_from_markdown(selected_path)
                    else:
                        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

            elif choice == '5':
                self._handle_step_deletion()

            elif choice == '4':
                self._handle_step_update_from_file_ids()

            elif choice == '6':
                print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
                break

            elif choice == '3':
                self._handle_add_step_to_lesson()

            else:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == '__main__':
    tools = StepikCourseTools()
    tools.interactive_dialog()
