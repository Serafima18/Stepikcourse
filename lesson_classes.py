import requests
from typing import List
from dataclasses import dataclass, field
from step_classes import Step  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Step


@dataclass
class Lesson:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É—Ä–æ–∫–∞–º–∏ –Ω–∞ Stepik (—Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
    """
    lesson_id: int
    steps: List[Step] = field(default_factory=list)

    def create(self, token: str) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —É—Ä–æ–∫ –Ω–∞ Stepik.
        """
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }

        data = {
            'lesson': {
                'title': f'–£—Ä–æ–∫ —Å {len(self.steps)} —à–∞–≥–∞–º–∏',
                'steps': [step.to_json() for step in self.steps]
            }
        }

        response = requests.post(
            'https://stepik.org/api/lessons',
            json=data,
            headers=headers
        )
        response.raise_for_status()

        result = response.json()
        self.lesson_id = result['lessons'][0]['id']
        return result

    def update(self, token: str) -> dict:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–∫ –Ω–∞ Stepik.
        """
        if not self.lesson_id:
            raise ValueError("Lesson ID is not set. Create lesson first.")

        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }

        data = {
            'lesson': {
                'id': self.lesson_id,
                'title': f'–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫ —Å {len(self.steps)} —à–∞–≥–∞–º–∏',
                'steps': [step.to_json() for step in self.steps]
            }
        }

        response = requests.put(
            f'https://stepik.org/api/lessons/{self.lesson_id}',
            json=data,
            headers=headers
        )
        response.raise_for_status()
        return response.json()

    def remove(self, token: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —É—Ä–æ–∫ —Å Stepik.
        """
        if not self.lesson_id:
            raise ValueError("Lesson ID is not set.")

        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }

        response = requests.delete(
            f'https://stepik.org/api/lessons/{self.lesson_id}',
            headers=headers
        )
        return response.status_code == 204

    def add_to_course(self, course_id: int, token: str, section_id: int = None, position: int = 1) -> dict:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —É—Ä–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫—É—Ä—Å —á–µ—Ä–µ–∑ API units.
        –ù–µ —Å–æ–∑–¥–∞—ë—Ç —Å–µ–∫—Ü–∏—é –∏ unit –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ —É—Ä–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.
        """
        if not self.lesson_id:
            raise ValueError("Lesson ID is not set. Create lesson first.")

        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É—Ä–æ–∫ –≤ –∫—É—Ä—Å?
        units_response = requests.get(
            f"https://stepik.org/api/units?lesson={self.lesson_id}",
            headers=headers
        )
        units_response.raise_for_status()
        units = units_response.json().get("units", [])

        for unit in units:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —É—Ä–æ–∫ —Å –Ω—É–∂–Ω—ã–º –∫—É—Ä—Å–æ–º
            section_id_from_unit = unit.get("section")
            if section_id_from_unit:
                section_resp = requests.get(
                    f"https://stepik.org/api/sections/{section_id_from_unit}",
                    headers=headers
                )
                section_resp.raise_for_status()
                section = section_resp.json().get("sections", [])[0]
                if section.get("course") == course_id:
                    print(f"üìé –£—Ä–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å {course_id}, —Å–µ–∫—Ü–∏—è ID {section_id_from_unit}")
                    return unit  # —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if section_id is None:
            sections_response = requests.get(
                'https://stepik.org/api/sections',
                params={'course': course_id, 'page': 1},
                headers=headers
            )
            sections_response.raise_for_status()
            sections = sections_response.json().get('sections', [])

            if not sections:
                print(f"‚ö†Ô∏è –í –∫—É—Ä—Å–µ {course_id} –Ω–µ—Ç —Å–µ–∫—Ü–∏–π. –°–æ–∑–¥–∞—é —Å–µ–∫—Ü–∏—é '–ê–≤—Ç–æ—Å–µ–∫—Ü–∏—è'...")
                section_data = {
                    "section": {
                        "course": course_id,
                        "title": "–ê–≤—Ç–æ—Å–µ–∫—Ü–∏—è",
                        "position": 1
                    }
                }
                create_section_response = requests.post(
                    'https://stepik.org/api/sections',
                    json=section_data,
                    headers=headers
                )
                create_section_response.raise_for_status()
                section_id = create_section_response.json()["sections"][0]["id"]
                print(f"‚úÖ –°–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID {section_id}")
            else:
                section_id = sections[0]['id']

        # –°–æ–∑–¥–∞–µ–º unit —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
        data = {
            'unit': {
                'section': section_id,
                'lesson': self.lesson_id,
                'position': position
            }
        }

        response = requests.post(
            'https://stepik.org/api/units',
            json=data,
            headers=headers
        )

        if response.status_code != 201:
            raise Exception(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ –≤ –∫—É—Ä—Å: {response.status_code} {response.text}")

        return response.json()